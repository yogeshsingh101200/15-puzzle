{"version":3,"sources":["utilities.js","components/Square.js","components/Success.js","components/Board.js","components/Header.js","components/Game.js","index.js"],"names":["findBlank","squares","i","length","setupBoard","Array","fill","forEach","val","idx","r","Math","floor","random","shuffle","inversions","blank","row","j","isSolvable","calculateWinner","Square","props","value","correct","className","onClick","Success","useState","show","setShow","Modal","size","onHide","backdrop","keyboard","centered","Body","moves","time","Button","variant","reset","Board","setState","seconds","timerId","clearInterval","state","this","slice","setInterval","includes","abs","handleClick","won","renderSquare","style","fontSize","Component","Header","icon","faInfoCircle","closeButton","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6a056ac.chunk.js","sourcesContent":["export const findBlank = squares => {\n    for (let i = 0; i < squares.length; ++i) {\n        if (!squares[i]) return i;\n    }\n};\n\nconst isSolvable = squares => {\n    let inversions = 0;\n    let blank = findBlank(squares);\n    let row = (blank - blank % 4) / 4;\n    for (let i = 0; i < squares.length - 1; ++i) {\n        for (let j = i + 1; j < squares.length; ++j) {\n            // j > i\n            if (squares[i] && squares[j] && squares[i] > squares[j]) ++inversions;\n        }\n    }\n    // Since grid width is even\n    if (((row ^ inversions) & 1) === 1) return true; // checks for opposite polarity\n    return false;\n};\n\nconst shuffle = squares => {\n    for (let i = 0; i < squares.length; ++i) {\n        let r = Math.floor(Math.random() * (i + 1));\n        [squares[i], squares[r]] = [squares[r], squares[i]];\n    }\n    return squares;\n};\n\nexport const setupBoard = () => {\n    let squares = Array(16).fill(0);\n    squares.forEach((val, idx) => {\n        squares[idx] = idx ? idx : null;\n    });\n    shuffle(squares);\n    if (!isSolvable(squares)) {\n        if (squares[0] && squares[1]) {\n            [squares[0], squares[1]] = [squares[1], squares[0]];\n        } else {\n            [squares[2], squares[3]] = [squares[3], squares[2]];\n        }\n    }\n    return squares;\n};\n\nexport const calculateWinner = squares => {\n    for (let i = 0; i < squares.length; ++i) {\n        if (squares[i] && squares[i] !== (i + 1)) return false;\n    }\n    return true;\n};\n","import React from 'react';\n\nexport default function Square(props) {\n    if (!props.value && !props.correct) {\n        return (\n            <button\n                className=\"square btn btn-light\"\n                onClick={props.onClick}\n            >\n                {props.value}\n            </button>\n        );\n    } else if (props.correct) {\n        return (\n            <button\n                className=\"square btn btn-success\"\n                onClick={props.onClick}\n            >\n                {props.value}\n            </button>\n        );\n    } else {\n        return (\n            <button\n                className=\"square btn btn-dark\"\n                onClick={props.onClick}\n            >\n                {props.value}\n            </button>\n        );\n    }\n}\n","import React, { useState } from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\n\n\nexport default function Success(props) {\n    const [show, setShow] = useState(true);\n    return (\n        <Modal\n            size=\"sm\"\n            show={show}\n            onHide={() => setShow(false)}\n            backdrop=\"static\"\n            keyboard={false}\n            centered\n        >\n            <Modal.Body className=\"text-center m-2 p-2\">\n                <h3 className=\"text-success\">Congratulations!</h3>\n                <p className=\"feedback\">\n                    You won with <span className=\"font-weight-bold\">{props.moves}</span> moves\n                    in <span className=\"font-weight-bold\">{props.time}</span> secs\n                </p>\n                <div className=\"d-flex justify-content-center mt-1 mb-2\">\n                    <Button variant=\"success\" onClick={props.reset} className=\"mr-2\">\n                        Play again\n                    </Button>\n                    <Button variant=\"danger\" onClick={() => setShow(false)} className=\"ml-2\">\n                        Close\n                    </Button>\n                </div>\n            </Modal.Body>\n        </Modal >\n    );\n}\n","import React, { Component } from 'react';\nimport { findBlank, setupBoard, calculateWinner } from \"../utilities\";\nimport Square from \"./Square\";\nimport Success from \"./Success\";\n\n\nexport class Board extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            squares: setupBoard(),\n            moves: 0,\n            seconds: 0\n        };\n    }\n\n    handleClick(i) {\n        if (calculateWinner(this.state.squares)) return;\n        const squares = this.state.squares.slice();\n        let blank = findBlank(squares);\n        if (blank === i) return;\n\n        if (this.state.moves === 0) {\n            this.timerId = setInterval(() => {\n                this.setState(state => ({\n                    seconds: state.seconds + 1\n                }));\n            }, 1000);\n        }\n\n        let places = [-1, 1, -4, 4];\n        if (places.includes(Math.abs(blank - i))) {\n\n            [squares[i], squares[blank]] = [squares[blank], squares[i]];\n\n            this.setState(state => ({\n                squares: squares,\n                moves: state.moves + 1\n            }));\n        }\n    }\n\n\n    reset = () => {\n        this.setState({\n            squares: setupBoard(),\n            moves: 0,\n            seconds: 0\n        });\n        if (this.timerId) {\n            clearInterval(this.timerId);\n        }\n    };\n\n\n    renderSquare(i) {\n        if ((this.state.squares[i] === i + 1) || (!this.state.squares[i] && i === 15)) {\n            return (\n                <Square\n                    value={this.state.squares[i]}\n                    correct={true}\n                    onClick={() => { this.handleClick(i); }}\n                />);\n        } else {\n            return (\n                <Square\n                    value={this.state.squares[i]}\n                    correct={false}\n                    onClick={() => { this.handleClick(i); }}\n                />);\n        }\n    }\n\n    render() {\n        let won = false;\n        if (calculateWinner(this.state.squares)) {\n            won = true;\n            clearInterval(this.timerId);\n        }\n\n        return (\n            <div>\n                {won ? <Success\n                    reset={this.reset}\n                    moves={this.state.moves}\n                    time={this.state.seconds}\n                /> : null}\n                <div className=\"info\">\n                    <div className=\"timer card bg-warning p-3 text-center w-100 font-weight-bold\">Time: {this.state.seconds}s</div>\n                    <div className=\"moves card bg-warning p-3 text-center w-100 font-weight-bold\">Moves: {this.state.moves}</div>\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                    {this.renderSquare(3)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(8)}\n                    {this.renderSquare(9)}\n                    {this.renderSquare(10)}\n                    {this.renderSquare(11)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(12)}\n                    {this.renderSquare(13)}\n                    {this.renderSquare(14)}\n                    {this.renderSquare(15)}\n                </div>\n                <div className=\"option\">\n                    <button\n                        className=\"btn btn-danger btn-block\"\n                        onClick={this.reset}\n                        style={{ fontSize: \"1.25rem\" }}\n                    >Restart</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport Modal from \"react-bootstrap/Modal\";\n\nexport default function Header() {\n    const [show, setShow] = useState(false);\n    return (\n        <>\n            <div className=\"game-header card py-3 px-2 mb-2 rounded-lg text-center\">\n                15 Puzzle <FontAwesomeIcon className=\"instructions-toggler ml-2\" icon={faInfoCircle} onClick={() => setShow(true)} />\n            </div>\n\n            <Modal\n                size=\"sm\"\n                show={show}\n                onHide={() => setShow(false)}\n                centered\n            >\n                <Modal.Header closeButton className=\"p-2\">\n                    Instruction\n                </Modal.Header>\n                <Modal.Body className=\"text-center m-2 p-2\">\n                    <div className=\"instructions\">\n                        <li>Click on a tile next to blank tile to swap it with blank tile.</li>\n                        <li>Swap blank tile with adjacent tile until all tiles are in order.</li>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        </>\n    );\n}\n","import React from \"react\";\nimport Board from \"./Board\";\nimport Header from \"./Header\";\n\nexport default function Game() {\n    return (\n        <div className=\"game\">\n            <Header />\n            <div className=\"game-board\">\n                <Board />\n            </div>\n        </div >\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootswatch/dist/darkly/bootstrap.min.css\";\nimport \"./index.scss\";\nimport Game from \"./components/Game\";\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}